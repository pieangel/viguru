unit CleStrangleConfig;

interface

uses
  Classes
  ;

type

  TOrderMethodType = ( omBuy, omSell, omSpBuy, omSpSell );

  TInvestStrangleParam = record
    OrdQty     : integer;
    EntryCnt   : integer;
    ListAmt    : double;

    Endtime : TDateTime;
    StartTime : TDateTime;

    UseCnt : boolean;
    UseInvest: boolean;
    UseLiq   : boolean;

    OrderMethod : TOrderMethodType;

    Ivt1Plue  : array [0..4] of boolean;
    Ivt1Value : array [0..4] of double;
    Ivt1Minus : array [0..4] of boolean;

    Ivt2Plue  : array [0..4] of boolean;
    Ivt2Value : array [0..4] of double;
    Ivt2Minus : array [0..4] of boolean;
  end;


  TOrderCon = class( TCollectionItem )
  public
    Value   : double;
    Checked : boolean;
    Ordered : boolean;
  end;

  TOrderCons = class( TCollection )
  private
    function GetSize: Integer;
    procedure SetSize(const Value: Integer);
    function GetLevel(i: Integer): TOrderCon;
  public
    constructor Create;
    property Size: Integer read GetSize write SetSize;
    property Level[i:Integer]: TOrderCon read GetLevel; default;
  end;

implementation

{ TOrderCons }

constructor TOrderCons.Create;
begin
  inherited Create( TOrderCon );
end;

function TOrderCons.GetLevel(i: Integer): TOrderCon;
begin
  if (i >= 0) and (i <= Count-1) then
    Result := Items[i] as TOrderCon
  else
    Result := nil;
end;

function TOrderCons.GetSize: Integer;
begin
  Result := Count;
end;

procedure TOrderCons.SetSize(const Value: Integer);
var
  i: Integer;
begin
  if Value > 0 then
    if Value > Count then
    begin
      for i := Count to Value-1 do Add;
    end else
    if Value < Count then
    begin
      for i := Count-1 downto Value do Items[i].Free;
    end
end;

end.
