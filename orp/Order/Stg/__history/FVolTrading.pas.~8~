unit FVolTrading;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,

  GleTypes,  CleAccounts, CleFunds,

  CleSymbols,  cleDistributor,  CleQuoteBroker,

  CleStorage, StdCtrls, ComCtrls, ExtCtrls, Grids
  ;

type
  TFrmVolTrading = class(TForm)
    plRun: TPanel;
    Button1: TButton;
    cbInvest: TComboBox;
    cbInvestType: TComboBox;
    edtSymbol: TLabeledEdit;
    stTxt: TStatusBar;
    Panel1: TPanel;
    Button2: TButton;
    edtLiskAmt: TLabeledEdit;
    cbRun: TCheckBox;
    edtBaseUpPrice: TLabeledEdit;
    edtBaseDownPrice: TLabeledEdit;
    udOrdQty: TUpDown;
    edtOrdQty: TLabeledEdit;
    edtOrdGap: TLabeledEdit;
    sg: TStringGrid;
    procedure FormCreate(Sender: TObject);
    procedure cbInvestTypeChange(Sender: TObject);
    procedure cbInvestChange(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
    FIndex    : integer;
    FAccount  : TAccount;
    FFund     : TFund;
    FSymbol : TSymbol;
    //FA50P2  : TA50_P2_Trend;
    //FParam  : TA50_P2Param;
    procedure Start;
    procedure Stop;
    procedure GetParam;
  public
    { Public declarations }
    procedure LoadEnv(aStorage: TStorage);
    procedure SaveEnv(aStorage: TStorage);
    procedure WMSymbolSelected(var msg: TMessage); message WM_SYMBOLSELECTED;    
  end;

var
  FrmVolTrading: TFrmVolTrading;

implementation

uses
  GAppEnv, GleLib
  ;

{$R *.dfm}

procedure TFrmVolTrading.Button1Click(Sender: TObject);
begin
  if gSymbol = nil then
    gEnv.CreateSymbolSelect;
  gSymbol.ShowWindow( Handle );
end;

procedure TFrmVolTrading.Button2Click(Sender: TObject);
begin
  //
end;

procedure TFrmVolTrading.cbInvestChange(Sender: TObject);
var
  aAcnt : TAccount;
  aFund : TFund;
begin
  //
  if FIndex = 0 then
  begin
    aAcnt := TAccount( GetComboObject( cbInvest ) );
    if aACnt <> FAccount then
    begin
      FAccount := aAcnt;
    end;

  end else
  begin
    aFund := TFund( GetComboObject( cbInvest ));
    if aFund <> FFund then
    begin
      FFund := aFund;
    end;             
  end
end;

procedure TFrmVolTrading.cbInvestTypeChange(Sender: TObject);
begin
  if FIndex = cbInvestType.ItemIndex then Exit;

  FIndex := cbInvestType.ItemIndex;

  if FIndex = 0 then begin
    cbInvest.Clear;
    gEnv.Engine.TradeCore.Accounts.GetList2( cbInvest.Items );
    if FAccount <> nil then
    begin
      SetComboIndex( cbInvest, FAccount );
      cbInvestChange( cbInvest );
    end;

  end
  else begin
    cbInvest.Clear;
    gEnv.Engine.TradeCore.Funds.GetList( cbInvest.Items);
    if FFund <> nil then
    begin
      SetComboIndex( cbInvest, FFund );
      cbInvestChange( cbInvest );
    end;
  end;

  if ( cbInvest.Items.Count > 0 ) and ( cbInvest.ItemIndex < 0) then
  begin
    cbInvest.ItemIndex  := 0;
    cbInvestChange( cbInvest );
  end;
end;

procedure TFrmVolTrading.FormCreate(Sender: TObject);
begin
  FSymbol := nil;
  FAccount  := nil;
  FFund     := nil;
  FIndex    := -1;
  //FA50P2    := TA50_P2_Trend.Create( Self );

  cbInvestTypeChange( cbInvestType );
end;

procedure TFrmVolTrading.GetParam;
begin

end;

procedure TFrmVolTrading.LoadEnv(aStorage: TStorage);
var
  aSymbol : TSymbol;
  aAcnt : TAccount;
  aFund : TFund;
begin
  if aStorage = nil then Exit;

  aSymbol := gEnv.Engine.SymbolCore.Symbols.FindCode2( aStorage.FieldByName('Symbolcode').AsString  );
  if aSymbol <> nil then
  begin
    FSymbol := aSymbol;
    edtSymbol.Text  := FSymbol.ShortCode;
  end;

  cbInvestType.ItemIndex  := aStorage.FieldByName('InvestType').AsInteger;
  cbInvestTypeChange( cbInvestType );

  if cbInvestType.ItemIndex = 0 then  // °èÁÂ
  begin
    aAcnt := gEnv.Engine.TradeCore.Accounts.Find( aStorage.FieldByName('AcntCode').AsString );
    if aAcnt <> nil then
    begin
      SetComboIndex( cbInvest, aAcnt );
      cbInvestChange(cbInvest);
    end;

  end else
  begin
    aFund := gEnv.Engine.TradeCore.Funds.Find( aStorage.FieldByName('FundName').AsString );
    if aFund <> nil then
    begin
      SetComboIndex( cbInvest, aFund );
      cbInvestChange(cbInvest);
    end;
  end;

  udOrdQty.Position := StrToIntDef( aStorage.FieldByName('OrdQty').AsString ,1 );
  edtBaseUpPrice.Text := aStorage.FieldByName('BaseUpPrc').AsString;
  edtBaseDownPrice.Text := aStorage.FieldByName('BaseDownPrc').AsString;
  edtOrdGap.Text    := aStorage.FieldByName('OrdGap').AsStringDef('') ;
  edtLiskAmt.Text   := aStorage.FieldByName('LiskAmt').AsStringDef('');
end;

procedure TFrmVolTrading.SaveEnv(aStorage: TStorage);
begin
  if aStorage = nil then Exit;

  aStorage.FieldByName('InvestType').AsInteger    := cbInvestType.ItemIndex;
  if FAccount <> nil then
    aStorage.FieldByName('AcntCode').AsString    := FAccount.Code
  else
    aStorage.FieldByName('AcntCode').AsString    := '';

  if FFund <> nil then
    aStorage.FieldByName('FundName').AsString    := FFund.Name
  else
    aStorage.FieldByName('FundName').AsString    := '';

  aStorage.FieldByName('Symbolcode').AsString     := edtSymbol.Text;

  aStorage.FieldByName('OrdQty').AsString     := edtOrdQty.Text;
  aStorage.FieldByName('BaseUpPrc').AsString    := edtBaseUpPrice.Text;
  aStorage.FieldByName('BaseDownPrc').AsString    := edtBaseDownPrice.Text;
  aStorage.FieldByName('OrdGap').AsString     := edtOrdGap.Text;
  aStorage.FieldByName('LiskAmt').AsString    := edtLiskAmt.Text;
end;

procedure TFrmVolTrading.Start;
begin

end;

procedure TFrmVolTrading.Stop;
begin

end;

procedure TFrmVolTrading.WMSymbolSelected(var msg: TMessage);
var
  aSymbol : TSymbol;
begin

  aSymbol := TSymbol( Pointer( msg.LParam ));

  if aSymbol <> nil then
    if aSymbol <> FSymbol then
    begin

      FSymbol := aSymbol;
      edtSymbol.Text  := FSymbol.ShortCode;
    end;  
end;

end.
