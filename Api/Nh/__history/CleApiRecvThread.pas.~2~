unit CleApiRecvThread;

interface

uses
  Classes,
  Windows, SyncObjs, SysUtils
  ;

type

  POrderPacket = ^TOrderPacket;
  TOrderPacket = record
    Size  : Integer;
    iDiv  : integer;
    Packet: array of Char;
  end;

  TApiRecvThread = class(TThread)
  private
    { Private declarations }
    FEvent  : TEvent;
    FMutex  : HWND;
    FQueue  : TList;
    FData   : POrderPacket;
  protected
    procedure Execute; override;
    procedure SyncProc;
  public
    constructor Create;
    destructor Destroy; override;

    procedure PushData( iSize : integer;   pData : PChar );
    function  PopData : POrderPacket;
  end;

implementation

uses
  Forms
  ;

{ Important: Methods and properties of objects in visual components can only be
  used in a method called using Synchronize, for example,

      Synchronize(UpdateCaption);

  and UpdateCaption could look like,

    procedure TApiRecvThread.UpdateCaption;
    begin
      Form1.Caption := 'Updated in a thread';
    end; }

{ TApiRecvThread }

constructor TApiRecvThread.Create;
begin

  FEvent  := TEvent.Create( nil, False, False, '');
  FMutex  := CreateMuTex( nil, false, '' );
  FQueue  := TList.Create;
  FreeOnTerminate := True;

  inherited Create(true);
  Priority  := tpNormal;
  Resume;
end;

destructor TApiRecvThread.Destroy;
begin
  FQueue.Free;
  CloseHandle( FMutex );
  FEvent.Free;
  inherited;
end;

procedure TApiRecvThread.Execute;
begin
  while not Terminated do
  begin

    if not( FEvent.WaitFor( INFINITE ) in [wrSignaled] ) then Continue;

    while FQueue.Count > 0 do begin
      FData := PopData;
      if FData <> nil then begin
        Synchronize( SyncProc );
        Dispose( FData );
      end;
      Application.ProcessMessages;
    end;
  end;

end;

function TApiRecvThread.PopData: POrderPacket;
begin

end;

procedure TApiRecvThread.PushData(iSize: integer; pData: PChar);
begin

end;

procedure TApiRecvThread.SyncProc;
begin

end;

end.
