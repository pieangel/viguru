unit FAccountPassWord;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs,

  CleAccounts, StdCtrls, Grids;

const
  CK_COL = 0;
  ACNT_COL = 1;

type
  TFrmAccountPassWord = class(TForm)
    Button1: TButton;
    Button2: TButton;
    sgAcnt: TStringGrid;
    cbAll: TCheckBox;

    procedure sgAcntDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
      State: TGridDrawState);
    procedure FormCreate(Sender: TObject);

    procedure sgAcntMouseUp(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure sgAcntMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);
    procedure cbAllClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure Button2Click(Sender: TObject);
    procedure sgAcntGetEditText(Sender: TObject; ACol, ARow: Integer;
      var Value: string);
  private
    { Private declarations }
    FCol, FRow : integer;
    FModal  : boolean;
  public
    { Public declarations }
    function Open : Boolean;
  end;

var
  FrmAccountPassWord: TFrmAccountPassWord;

implementation

uses
  GAppEnv, GleLib, GleConsts, GleTypes
  ;

{$R *.dfm}

procedure TFrmAccountPassWord.Button1Click(Sender: TObject);
var
  I, iCnt: Integer;
  aInvest : TInvestor;
  stLog : string;
begin

  iCnt := 0;
  stLog := '';
  for I := 1 to sgAcnt.RowCount - 1 do
    if TCheckBox( sgAcnt.Objects[CK_COL, i]).Checked then
    begin
      aInvest := TInvestor( sgAcnt.Objects[ACNT_COL,i]);
      if (aInvest <> nil) and ( sgAcnt.Cells[3, i] <> '') then
      begin
        aInvest.PassWord  := sgAcnt.Cells[3,i];
        gEnv.Engine.TradeBroker.AccountEvent( aInvest, ACCOUNT_PWD );
        inc( iCnt );

        stLog := stLog + aInvest.Code + ' ';
      end;
    end;

  if iCnt = 0 then
  begin
    ShowMessage('저장할 계좌가 없습니다.');
    Exit;
  end;

  gLog.Add( lkApplication, 'TFrmAccountPassWord', 'Button1Click', '비번 저장 계좌 : ' + stLog );

  ModalResult := mrOK;

end;

procedure TFrmAccountPassWord.Button2Click(Sender: TObject);
begin
  if FModal then  
    ModalResult := mrCancel
  else
    Close;
end;

procedure TFrmAccountPassWord.cbAllClick(Sender: TObject);
var
  I: Integer;
begin
  for I := 1 to sgAcnt.RowCount - 1 do
    TCheckBox( sgAcnt.Objects[CK_COL, i]).Checked := cbAll.Checked;
end;

procedure TFrmAccountPassWord.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
    Action := caFree;
end;

procedure TFrmAccountPassWord.FormCreate(Sender: TObject);
var
  I: Integer;
  aCK : TCheckBox;
  aInvest : TInvestor;
begin
  //
  with sgAcnt do
  begin
    Cells[1,0]  := '계좌명';
    Cells[2,0]  := '계좌번호';
    Cells[3,0]  := '비밀번호';
  end;

  FCol := -1;
  FRow := -1;
  FModal  := false;

  sgAcnt.RowCount := gEnv.Engine.TradeCore.Investors.Count+1;

  with sgAcnt do

  for I := 0 to gEnv.Engine.TradeCore.Investors.Count - 1 do
  begin
    aInvest := gEnv.Engine.TradeCore.Investors.Investor[i];
    Cells[ 1, i+1]  := aInvest.Name;
    Cells[ 2, i+1]  := aInvest.Code;
    Cells[ 3, i+1]  := '6931';//aInvest.PassWord ;

    aCK := TCheckBox.Create( Self );
    with aCk do
    begin
      Left  := cbAll.Left;
      Top   := cbAll.Top + (DefaultRowHeight * (i+1))+(i+1);
      Width := cbAll.Width;
      Height:= cbAll.Height;
      Color := clWhite;
      Parent  :=  cbAll.Parent;
    end;

    //if aInvest.PassWord = '' then
      aCK.Checked := true;

    Objects[ CK_COL, i+1] := aCK;
    Objects[ACNT_COL,i+1] := aInvest;
  end;

end;

function TFrmAccountPassWord.Open: Boolean;
begin
  FModal := true;
  Result := (ShowModal = mrOK);
end;

procedure TFrmAccountPassWord.sgAcntDrawCell(Sender: TObject; ACol,
  ARow: Integer; Rect: TRect; State: TGridDrawState);
  var
    aGrid : TStringGrid;
    aBack, aFont : TColor;
    dFormat : Word;
    stTxt : string;
    aRect : TRect;
    aPos : TPosition;
begin
  aGrid := Sender as TStringGrid;

  aFont   := clBlack;
  aBack   := clWhite;
  dFormat := DT_CENTER or DT_VCENTER;
  aRect   := Rect;

  with aGrid do
  begin
    stTxt := Cells[ ACol, ARow];

    if ARow = 0 then
      aBack := clBtnFace;

    Canvas.Font.Color   := aFont;
    Canvas.Brush.Color  := aBack;
    Canvas.FillRect( Rect);

    aRect.Top := aRect.Top + 1;

    DrawText( Canvas.Handle, PChar( stTxt ), Length( stTxt ), aRect, dFormat );

    if ARow = 0 then begin
      Canvas.Pen.Color := clBlack;
      Canvas.PolyLine([Point(Rect.Left,  Rect.Bottom),
                       Point(Rect.Right, Rect.Bottom),
                       Point(Rect.Right, Rect.Top)]);
      Canvas.Pen.Color := clWhite;
      Canvas.PolyLine([Point(Rect.Left,  Rect.Bottom),
                       Point(Rect.Left,  Rect.Top),
                       Point(Rect.Right, Rect.Top)]);
    end;
  end;

end;




procedure TFrmAccountPassWord.sgAcntGetEditText(Sender: TObject; ACol,
  ARow: Integer; var Value: string);
  var
    aInvest : Tinvestor;
begin
  aInvest := TInvestor( sgAcnt.Objects[ACNT_COL, ARow] );
  if aInvest.PassWord <> '' then
    Value := aInvest.PassWord;
end;

procedure TFrmAccountPassWord.sgAcntMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
  sgAcnt.EditorMode := false;
  sgAcnt.Options    := sgAcnt.Options - [ goEditing ];
end;

procedure TFrmAccountPassWord.sgAcntMouseUp(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin

  sgAcnt.MouseToCell( X, Y, FCol, FRow);

  with sgAcnt do
    if ( FCol = 3 ) and ( FRow > 0 ) and
       ( Objects[CK_COL, FRow] <> nil ) and ( Objects[ACNT_COL, FRow] <> nil ) then
    begin
      if TCheckBox(Objects[CK_COL,FRow]).Checked then begin
        Options     := Options + [ goEditing ];
        EditorMode  := true;
      end;
    end else begin
      EditorMode  := true;
      Options     := Options - [ goEditing ];
    end;

end;

end.
