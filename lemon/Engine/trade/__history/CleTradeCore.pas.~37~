unit CleTradeCore;

// Copyright(C) Eight Pines Technologies, Inc. All Rights Reserved.

// Core Data Object for trades

interface

uses
  Classes,
    // lemon: data
  CleFunds, CleAccounts, CleOrders, CleFills, ClePositions, CleTrades,

  CleStopOrders,  ClePrograms,  CleFrontOrder,

  CleStorage

  ;

type
  TTradeCore = class
  private
    FFunds: TFunds;
    FAccounts: TAccountList;
      //
    FOrderTickets: TOrderTickets;
    FOrderResults: TOrderResults;
    FOrders: TOrders;
    FFills: TFills;
    FPositions: TPositions;
      // optional used only in US
    FTrades: TTrades;
    FPrograms: TPrograms;

    FFrontOrders: TOrderItems;
    FInvestors: TInvestors;
    FInvestorPositions: TPositions;
    FStopOrders: TStopOrders;
    FStorage: TStorage;

  public
    constructor Create;
    destructor Destroy; override;

    property Funds: TFunds read FFunds;
    property Accounts: TAccountList read FAccounts;

    property OrderTickets: TOrderTickets read FOrderTickets;
    property Orders: TOrders read FOrders;
    property OrderResults: TOrderResults read FOrderResults;
    property Fills: TFills read FFills;
    property Positions: TPositions read FPositions;
    property Investors: TInvestors read FInvestors;
    property InvestorPositions: TPositions read FInvestorPositions;

    property Trades: TTrades read FTrades;
    property Programs: TPrograms read FPrograms;
    //property TopsQuery : TTopsQuery read FTopsQuery;

    property FrontOrders : TOrderItems read FFrontOrders;
    property StopOrders  : TStopOrders read FStopOrders;
    property Storage  : TStorage read FStorage;

    procedure CheckVirAccount;
    procedure Reset( iPos : integer; bBack : boolean );
    procedure Clear;
    procedure AccountPrint( stTitle : string = '' );

    procedure SaveVirAccount;

  end;

implementation

uses GAppEnv, SysUtils,  CleFQN,
  GleLib
  ;

{ TTradeCore }

procedure TTradeCore.AccountPrint;
begin

end;

procedure TTradeCore.CheckVirAccount;
var
  aAcnt : TAccount;
  i : integer;
  aInvestor: TInvestor;
  stCode, stName : string;
begin
  //  하나의 investor 는 적어도 하나 이상의 가상계좌를 가져와 한다.

  for I := 0 to gEnv.Engine.TradeCore.Investors.Count - 1 do
  begin
    aInvestor := gEnv.Engine.TradeCore.Investors.Investor[i];

    if aInvestor.Accounts.Count = 0 then
    begin
      stCode  := Copy( aInvestor.Code, 7, Length( aInvestor.Code ) - 7 + 1 ) + '_1';
      stName  := aInvestor.Name +'_1' ;
      aAcnt := aInvestor.Accounts.New( stCode, stName, mtFutures, gEnv.ConConfig.Password );
      aAcnt.DefAcnt := true;
      aAcnt.InvestCode  := aInvestor.Code;
      aAcnt.LogIdx  := 0;
      aInvestor.RceAccount  := aAcnt;
    end;
  end;
end;

procedure TTradeCore.Clear;
begin
  FOrderTickets.Clear;
  FOrderResults.Clear;
  FOrders.Clear;
  FFills.Clear;
  FPositions.Clear;

  FFrontOrders.Clear;
  FInvestorPositions.Clear;
  FInvestors.Reset;
  FStopOrders.Clear;
end;

constructor TTradeCore.Create;
begin
    // group 1
  FFunds := TFunds.Create;

  FInvestors  := TInvestors.Create;
  FAccounts:= TAccountList.Create;

  FInvestorPositions:= TPositions.Create;
    // group 2
  FOrderTickets := TOrderTickets.Create;
  FOrderResults := TOrderResults.Create;
  FOrders := TOrders.Create;

    // group 3
  FFills := TFills.Create;
  FPositions := TPositions.Create;

    // group 4, optional used only in US
  FTrades := TTrades.Create;
  FPrograms := TPrograms.Create;

    //
  FFrontOrders:= TOrderItems.Create;
  FStopOrders := TStopOrders.Create;

  FStorage  := TStorage.Create;

end;

destructor TTradeCore.Destroy;
begin

  FStorage.New;
  SaveVirAccount;
  FStorage.Free;

    // group 4
  FPrograms.Free;
  FTrades.Free;
  FStopOrders.Free;

    // group 3
  FOrders.Free;
  FOrderResults.Free;
  FOrderTickets.Free;

    // group 2
  FFills.Free;
  FPositions.Free;
  FInvestorPositions.Free;

    // group 1
  FInvestors.Free;
  FAccounts.Free;
  FFunds.Free;
  FFrontOrders.Free;

  inherited;
end;

procedure TTradeCore.Reset(iPos: integer; bBack : boolean);
begin

end;

procedure TTradeCore.SaveVirAccount;
var
  i , j : integer;
  aInvest : TInvestor;
  aAcnt : TAccount;
begin

  for i := 0 to Investors.Count - 1 do
  begin
    aInvest := Investors.Investor[i];
    if aInvest = nil then Continue;

    FStorage.New;

    FStorage.FieldByName('code').AsString := aInvest.Code;
    FStorage.FieldByName('name').AsString := aInvest.Name;
    FStorage.FieldByName('count').AsInteger := aInvest.Accounts.Count;

    for j := 0 to aInvest.Accounts.Count - 1 do
    begin
      aAcnt := aInvest.Accounts.Accounts[j];
      if aACnt = nil then Continue;

      FStorage.FieldByName('code_'+IntToStr(j)).AsString := aAcnt.Code;
      FStorage.FieldByName('name_'+IntToStr(j)).AsString := aAcnt.Name;
    end;
  end;

  FStorage.Save( ComposeFilePath([gEnv.DataDir, 'account.lsg']) );

end;

end.
