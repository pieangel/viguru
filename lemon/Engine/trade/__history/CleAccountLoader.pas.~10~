unit CleAccountLoader;

interface

uses
  Classes, SysUtils,
    // lemon: common
  LemonEngine, GleTypes,  GleConsts,
    // lemon: utils
  XMLDoc,  XMLIntf,
    // lemon: data
  CleAccounts
  ;

type
  TAccountLoader = Class
  private
    FEngine: TLemonEngine;
    FOnLog: TTextNotifyEvent;
    Accounts  : TAccounts;
    FXmlAcnt  : TXMLDocument;

    procedure DoLog(stLog: String);
    procedure CheckVirAccount;


  public
    constructor Create(aEngine: TLemonEngine);
    destructor Destroy; override;

    procedure SaveVirAccount;

    function Load : boolean;
    function LoadVirtualAccount : boolean;
  End;


implementation

uses
  CleFQN, GAppEnv, GAppConsts, GleLib ;

{ TAccountLoader }

constructor TAccountLoader.Create(aEngine: TLemonEngine  );
begin
  FEngine := aEngine;
  Accounts  :=  TAccounts.Create
end;

destructor TAccountLoader.Destroy;
begin
  inherited;
end;

procedure TAccountLoader.DoLog(stLog: String);
begin

end;

function TAccountLoader.Load: boolean;
begin
  try
    FXmlAcnt := TXMLDocument.Create( nil );

    Result :=  LoadVirtualAccount;
    if not Result  then
      CheckVirAccount;

  finally
    FXmlAcnt.Free;
  end;
end;

function TAccountLoader.LoadVirtualAccount: boolean;
var
  aAcnt : TAccount;
  aInvest : TInvestor;
  stInvest,stTmp, stAcnt, stName: string;
  aType : TAccountType;
  stFileName : string;
  ival, I, j: Integer;
  xnAcnt : IXMLNode;
  xnVirAcnt : IXMLNode;

begin
  Result := false;

  stFileName := ExtractFilePath( paramstr(0) )+'env\'+FILE_ACNT ;

  if not FileExists(stFileName) then
    Exit;

  try
    FXmlAcnt.LoadFromFile( stFileName );
    FXmlAcnt.Active := true;

    if FXmlAcnt.ChildNodes.First = nil then Exit;

    // 계좌 개수
    for I := 0 to FXmlAcnt.DocumentElement.ChildNodes.Count - 1 do
    begin
      xnAcnt  := FXmlAcnt.DocumentElement.ChildNodes[i];
      stInvest := xnAcnt.Attributes['code'];
      aInvest := gEnv.Engine.TradeCore.Investors.Find( stInvest );

      if aInvest <> nil then
      begin
        for j := 0 to xnAcnt.ChildNodes.Count - 1 do
        begin
          xnVirAcnt := xnAcnt.ChildNodes[j];

          stAcnt := xnVirAcnt.Attributes['code'];
          stName := xnVirAcnt.Attributes['name'];
          ival   := xnVirAcnt.Attributes['def'];

          aAcnt :=  aInvest.Accounts.New( stAcnt, stName, mtFutures );
          aAcnt.InvestCode  := stInvest;
          if ival = 1 then
          begin
            aAcnt.DefAcnt := true;
            aInvest.RceAccount  := aAcnt;
          end;

          stTmp := Format('%s 의 가상계좌 로드 -> %s, %s, %s', [
            stInvest, stAcnt, stName, ifThenStr( ival = 1, '기본','')]);
          gLog.Add( lkApplication, '','', stTmp );

        end;
      end;
    end;

    FXmlAcnt.Active := false

  except
  end;

end;



procedure TAccountLoader.CheckVirAccount;
var
  aAcnt : TAccount;
  i : integer;
  aInvestor: TInvestor;
  stCode, stName : string;
begin
  //  하나의 investor 는 적어도 하나 이상의 가상계좌를 가져와 한다.
  for I := 0 to gEnv.Engine.TradeCore.Investors.Count - 1 do
  begin
    aInvestor := gEnv.Engine.TradeCore.Investors.Investor[i];

    if aInvestor.Accounts.Count = 0 then
    begin

      stCode  := Copy( aInvestor.Code, 7, Length( aInvestor.Code ) - 7 + 1 ) + '_99';
      stName  := aInvestor.Name +'_Def' ;
      aAcnt := aInvestor.Accounts.New( stCode, stName, mtFutures, gEnv.ConConfig.Password );
      aAcnt.DefAcnt := true;
      aAcnt.InvestCode  := aInvestor.Code;
      aAcnt.LogIdx  := 0;
      aInvestor.RceAccount  := aAcnt;

    end;
  end;

end;

procedure TAccountLoader.SaveVirAccount;
var
  aAcnt : TAccount;
  stFileName : string;
  i, j : integer;
  aInvestor : TInvestor;

  xnRoot  , xnAcnt,
  xnVirAcnt : IXMLNode;
begin

  try
    FXmlAcnt := TXMLDocument.Create( nil );
    FXmlAcnt.Active := True;
    FXmlAcnt.Encoding:= 'euc-kr';

    // 루트 노드 만들기
    xnRoot := FXmlAcnt.AddChild('AccountList');
    xnRoot.Attributes['LatestUpdate'] := FormatDateTime('YYYY/MM/DD', Now);



    for I := 0 to gEnv.Engine.TradeCore.Investors.Count - 1 do
    begin
      aInvestor := gEnv.Engine.TradeCore.Investors.Investor[i];

      xnAcnt  := xnRoot.AddChild('Account');
      xnAcnt.Attributes['code'] := aInvestor.Code;
      xnAcnt.Attributes['name'] := aInvestor.Name;

      for j := 0 to aInvestor.Accounts.Count - 1 do
      begin
        aAcnt := aInvestor.Accounts.Accounts[j];

        xnVirAcnt := xnAcnt.AddChild('VirAcnt');
        xnVirAcnt.Attributes['code']  := aAcnt.Code;
        xnVirAcnt.Attributes['name']  := aAcnt.Name;
        if aAcnt.DefAcnt then        
          xnVirAcnt.Attributes['def'] := 1
        else
          xnVirAcnt.Attributes['def'] := 0;
      end;
    end;

  finally
    stFileName := ExtractFilePath( paramstr(0) )+'env\'+FILE_ACNT ;
    FXmlAcnt.SaveToFile(stFileName);
    FXmlAcnt.Free;
  end;

end;


end.
