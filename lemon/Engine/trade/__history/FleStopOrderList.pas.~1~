unit FleStopOrderList;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, ExtCtrls, StdCtrls,

  CleAccounts, CleSymbols, CleStopOrders, CBoardDistributor   ,

  CleStorage
  ;

  {
    Account : TAccount;
    Symbol  : TSymbol;
    Side    : integer;
    OrdQty  : integer;
    soType  : TStopOrderType;
    Price   : double;
    TargetPrice : double;
    LastPrice   : double;
    Tick    : integer;
    Index   : integer;
    MustClear   : boolean;
    GroupID : integer;
  }
const
  Title_Cnt = 7;
  Title : array [0..Title_Cnt-1] of string =
    ( '종목','LS','가격','수량', '타켓','Tick','비고'  );
  Stop_Col  = 0;
  Color_Col = 1;

type
  TFrmStopOrderList = class(TForm)
    Panel1: TPanel;
    sgStop: TStringGrid;
    cbAccount: TComboBox;
    Label1: TLabel;
    procedure FormDestroy(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure cbAccountChange(Sender: TObject);
    procedure sgStopDrawCell(Sender: TObject; ACol, ARow: Integer; Rect: TRect;
      State: TGridDrawState);
    procedure sgStopMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);

  private
    { Private declarations }
    FAccount  : TAccount;
    FRow      : integer;
    procedure initControls;
    procedure UpdateData;
    procedure UpdateStopData( aStop : TStopOrderItem );
    procedure UpdateStopLine(iRow: integer; aStop: TStopOrderItem);
  public
    { Public declarations }
    procedure ClearGrid;
    procedure BoardEnvEventHander (Sender : TObject; DataObj: TObject;
      etType: TEventType; vtType : TValueType );
  end;

var
  FrmStopOrderList: TFrmStopOrderList;

implementation

uses
  GAppEnv, GleLib, GleConsts
  ;

{$R *.dfm}

procedure TFrmStopOrderList.BoardEnvEventHander(Sender, DataObj: TObject;
  etType: TEventType; vtType: TValueType);
  var
    pStop : TStopOrderItem;
begin
  pStop := DataObj as TStopOrderItem;

  if (pStop.Account <> FAccount ) then Exit;

  case vtType of
    vtAdd   ,
    vtDelete: UpdateStopData( pStop );
    else Exit;
  end;

end;

procedure TFrmStopOrderList.cbAccountChange(Sender: TObject);
var
  aAcnt : TAccount;
begin
  aAcnt := TAccount( cbAccount.Items.Objects[ cbAccount.ItemIndex ] );
  if aAcnt = nil then Exit;
  if FAccount <> aAcnt then
  begin
    ClearGrid;
    FAccount := aAcnt;
    UpdateData;
  end;
end;

procedure TFrmStopOrderList.ClearGrid;
var
  I: integer;
begin
  with sgStop do
    for I := 1 to RowCount - 1 do
      Rows[i].Clear;

  sgStop.RowCount := 2;
  sgStop.FixedRows:= 1;
    
end;

procedure TFrmStopOrderList.UpdateData;
var
  I, j: Integer;
begin
  for I := 0 to gEnv.Engine.TradeCore.StopOrders.Count - 1 do
  begin
    if gEnv.Engine.TradeCore.StopOrders.StopOrder[i].Account = FAccount then
    begin
      for j := 0 to gEnv.Engine.TradeCore.StopOrders.StopOrder[i].BidStopList.Count - 1 do
        UpdateStopData( TStopOrderItem( gEnv.Engine.TradeCore.StopOrders.StopOrder[i].BidStopList.Items[j] )  );

      for j := 0 to gEnv.Engine.TradeCore.StopOrders.StopOrder[i].AskStopList.Count - 1 do
        UpdateStopData( TStopOrderItem( gEnv.Engine.TradeCore.StopOrders.StopOrder[i].AskStopList.Items[j] ) );
    end;
  end;
end;

procedure TFrmStopOrderList.UpdateStopData(aStop: TStopOrderItem);
var
  iRow : integer;
begin
  case aStop.soType of
    soNone: Exit;
    soNew :
      begin
        InsertLine( sgStop, 1 );
        UpdateStopLine( 1, aStop );
      end ;
    soCancel:
      begin
        iRow  := sgStop.Cols[Stop_Col].IndexOfObject( aStop );
        if iRow > 0 then
          DeleteLine( sgStop, iRow );
      end;
  end;

end;

procedure TFrmStopOrderList.UpdateStopLine( iRow: integer; aStop: TStopOrderItem);
var
  iCol : integer;
  stTmp : string;
begin
                       //( '종목','LS','가격','수량', '타켓','Tick','비고'  );
  iCol  := 0;
  with sgStop do
  begin
    Objects[ Stop_Col, iRow] := aStop;
    if aStop.Side > 0  then    
      Objects[ Color_Col, iRow]:= Pointer( clRed )
    else
      Objects[ Color_Col, iRow]:= Pointer( clBlue );

    Cells[iCol, iRow] := aStop.Symbol.Code;          inc( iCol );
    Cells[iCol, iRow] := ifThenStr( aStop.Side > 0 ,'L', 'S' );  inc( iCol );
    Cells[iCol, iRow] := aStop.Symbol.PriceToStr( aStop.Price );             inc( iCol );
    Cells[iCol, iRow] := IntToStr( aStop.OrdQty );      inc( iCol );
    Cells[iCol, iRow] := aStop.Symbol.PriceToStr( aStop.TargetPrice );  inc( iCol );
    Cells[iCol, iRow] := IntToStr( aStop.Tick );  inc( iCol );
    Cells[icol, iRow] := ifThenStr( aStop.GroupID > 0,'Auto', '' ); inc( iCol );
  end;
end;

procedure TFrmStopOrderList.FormClose(Sender: TObject;
  var Action: TCloseAction);
begin
  Action := caFree;
end;

procedure TFrmStopOrderList.FormCreate(Sender: TObject);
begin

  FAccount:= nil;

  gEnv.Engine.TradeCore.Accounts.GetList( cbAccount.Items);

  if cbAccount.Items.Count > 0 then
  begin
    cbAccount.ItemIndex := 0;
    cbAccountChange( cbAccount );
  end;

  gEnv.Engine.TradeCore.StopOrders.BoardItems.RegistCfg( Self, etStop, BoardEnvEventHander );

  initControls;

  FRow  := -1;
end;

procedure TFrmStopOrderList.initControls;
var
  I: integer;
begin
  with sgStop do
  begin
    for I := 0 to ColCount - 1 do
      Cells[i,0]  := Title[i];
  end;
end;



procedure TFrmStopOrderList.sgStopDrawCell(Sender: TObject; ACol, ARow: Integer;
  Rect: TRect; State: TGridDrawState);
  var
    aFont , aBack : TColor;
    stTxt : string;
    dFormat : Word;
begin

  aFont := clBlack;
  aBack := clWhite;
  dFormat := DT_VCENTER or DT_RIGHT;

  with sgStop do
  begin
    stTxt := Cells[ ACol, ARow ];

    if ARow = 0 then
    begin
      aBack   := clBtnFace;
      dFormat := DT_VCENTER or DT_CENTER;
    end
    else begin

      if ACol = Color_Col then
        aFont := TColor( Objects[ ACol, ARow] );

    end;

    if ARow = FRow then
    begin
      aBack := $00F2BEB9;
    end;

    Canvas.Font.Color   := aFont;
    Canvas.Brush.Color  := aBack;
    Canvas.FillRect( Rect);

    DrawText( Canvas.Handle, PChar( stTxt ), Length( stTxt ), Rect, dFormat );
  end;
end;

procedure TFrmStopOrderList.sgStopMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  var
    ARow, ACol : integer;
begin
  ARow := FRow;
  sgStop.MouseToCell( x, y, ACol, FRow);

  InvalidateRow( sgStop, ARow );
  InvalidateRow( sgStop, FRow );

end;

procedure TFrmStopOrderList.FormDestroy(Sender: TObject);
begin
  gEnv.Engine.TradeCore.StopOrders.BoardItems.UnRegistCfg( Self );

end;

end.
